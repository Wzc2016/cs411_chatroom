{"ast":null,"code":"import _classCallCheck from \"/home/zecheng3/workspace/cs411/final_project/react-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/zecheng3/workspace/cs411/final_project/react-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/zecheng3/workspace/cs411/final_project/react-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/zecheng3/workspace/cs411/final_project/react-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/zecheng3/workspace/cs411/final_project/react-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/zecheng3/workspace/cs411/final_project/react-demo/src/components/Pokemon/PokemonView/PokemonView.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Label } from 'semantic-ui-react';\nimport { PokemonView as PokemonViewCss, PokemonViewHeader } from './PokemonView.module.scss';\n\nvar PokemonView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PokemonView, _Component);\n\n  function PokemonView() {\n    _classCallCheck(this, PokemonView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PokemonView).apply(this, arguments));\n  }\n\n  _createClass(PokemonView, [{\n    key: \"render\",\n    value: function render() {\n      // Check if the object is empty\n      var noPokemon = Object.entries(this.props.pokemon).length === 0 && this.props.pokemon.constructor === Object;\n\n      if (noPokemon) {\n        return React.createElement(Card, {\n          className: PokemonViewCss,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, \"No Pokemon yet!\"));\n      } else {\n        // Iterate over the Pokemon's abilities and generate a label for each.\n        var abilitiesView = this.props.pokemon.abilities.map(function (ability, idx) {\n          return (// Using `idx` as a key is generally discouraged:\n            // https://reactjs.org/docs/lists-and-keys.html#keys\n            React.createElement(Label, {\n              key: idx,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 25\n              },\n              __self: this\n            }, ability.ability.name)\n          );\n        }); // Display some data about the Pokemon, and its abilities.\n\n        return React.createElement(Card, {\n          className: PokemonViewCss,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(Card.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, React.createElement(Card.Header, {\n          className: PokemonViewHeader,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, this.props.pokemon.Movie), React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"Abilities\")));\n      }\n    }\n  }]);\n\n  return PokemonView;\n}(Component);\n\nPokemonView.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    abilities: PropTypes.arrayOf(PropTypes.shape({\n      ability: PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string\n      })\n    })),\n    sprites: PropTypes.object\n  })\n};\nexport default PokemonView;","map":{"version":3,"sources":["/home/zecheng3/workspace/cs411/final_project/react-demo/src/components/Pokemon/PokemonView/PokemonView.jsx"],"names":["React","Component","PropTypes","Card","Label","PokemonView","PokemonViewCss","PokemonViewHeader","noPokemon","Object","entries","props","pokemon","length","constructor","abilitiesView","abilities","map","ability","idx","name","Movie","propTypes","shape","string","id","number","arrayOf","url","sprites","object"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,mBAA5B;AAEA,SAASC,WAAW,IAAIC,cAAxB,EAAwCC,iBAAxC,QAAiE,2BAAjE;;IAEMF,W;;;;;;;;;;;;;6BACK;AACP;AACA,UAAMG,SAAS,GAAGC,MAAM,CAACC,OAAP,CAAe,KAAKC,KAAL,CAAWC,OAA1B,EAAmCC,MAAnC,KAA8C,CAA9C,IACb,KAAKF,KAAL,CAAWC,OAAX,CAAmBE,WAAnB,KAAmCL,MADxC;;AAGA,UAAID,SAAJ,EAAe;AACb,eACE,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAEF,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAKD,OAND,MAMO;AACL;AACA,YAAMS,aAAa,GAAG,KAAKJ,KAAL,CAAWC,OAAX,CAAmBI,SAAnB,CAA6BC,GAA7B,CAAiC,UAACC,OAAD,EAAUC,GAAV,EAAkB;AACvE,iBACE;AACA;AACA,gCAAC,KAAD;AAAO,cAAA,GAAG,EAAEA,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACGD,OAAO,CAACA,OAAR,CAAgBE,IADnB;AAHF;AAOD,SARqB,CAAtB,CAFK,CAYL;;AACA,eACE,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAEd,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD,CAAM,MAAN;AAAa,UAAA,SAAS,EAAEC,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKI,KAAL,CAAWC,OAAX,CAAmBS,KADtB,CADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAXF,CADF,CADF;AAkBD;AACF;;;;EA5CuBpB,S;;AA+C1BI,WAAW,CAACiB,SAAZ,GAAwB;AACtBV,EAAAA,OAAO,EAAEV,SAAS,CAACqB,KAAV,CAAgB;AACvBH,IAAAA,IAAI,EAAElB,SAAS,CAACsB,MADO;AAEvBC,IAAAA,EAAE,EAAEvB,SAAS,CAACwB,MAFS;AAGvBV,IAAAA,SAAS,EAAEd,SAAS,CAACyB,OAAV,CAAkBzB,SAAS,CAACqB,KAAV,CAAgB;AAC3CL,MAAAA,OAAO,EAAEhB,SAAS,CAACqB,KAAV,CAAgB;AACvBH,QAAAA,IAAI,EAAElB,SAAS,CAACsB,MADO;AAEvBI,QAAAA,GAAG,EAAE1B,SAAS,CAACsB;AAFQ,OAAhB;AADkC,KAAhB,CAAlB,CAHY;AASvBK,IAAAA,OAAO,EAAE3B,SAAS,CAAC4B;AATI,GAAhB;AADa,CAAxB;AAcA,eAAezB,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Card, Label } from 'semantic-ui-react'\n\nimport { PokemonView as PokemonViewCss, PokemonViewHeader } from './PokemonView.module.scss'\n\nclass PokemonView extends Component {\n  render() {\n    // Check if the object is empty\n    const noPokemon = Object.entries(this.props.pokemon).length === 0\n      && this.props.pokemon.constructor === Object;\n\n    if (noPokemon) {\n      return (\n        <Card className={PokemonViewCss}>\n          <h3>No Pokemon yet!</h3>\n        </Card>\n      )\n    } else {\n      // Iterate over the Pokemon's abilities and generate a label for each.\n      const abilitiesView = this.props.pokemon.abilities.map((ability, idx) => {\n        return (\n          // Using `idx` as a key is generally discouraged:\n          // https://reactjs.org/docs/lists-and-keys.html#keys\n          <Label key={idx}>\n            {ability.ability.name}\n          </Label>\n        )\n      });\n\n      // Display some data about the Pokemon, and its abilities.\n      return (\n        <Card className={PokemonViewCss}>\n          <Card.Content>\n            <Card.Header className={PokemonViewHeader}>\n              {this.props.pokemon.Movie}\n            </Card.Header>\n           {/* <Card.Meta>\n              Pokedex #{this.props.pokemon.id}\n            </Card.Meta>\n            <img\n              src={this.props.pokemon.sprites.front_default}\n              alt={`Sprite of ${this.props.pokemon.name}`}\n            />*/}\n            <h4>Abilities</h4>\n            {/*{abilitiesView}*/}\n          </Card.Content>\n        </Card>\n      )\n    }\n  }\n}\n\nPokemonView.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    abilities: PropTypes.arrayOf(PropTypes.shape({\n      ability: PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      })\n    })),\n    sprites: PropTypes.object,\n  }),\n}\n\nexport default PokemonView\n"]},"metadata":{},"sourceType":"module"}