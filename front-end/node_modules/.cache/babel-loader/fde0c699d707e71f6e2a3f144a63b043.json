{"ast":null,"code":"import _classCallCheck from \"/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/src/components/Movie/MovieView/MovieView.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Label } from 'semantic-ui-react';\nimport './MovieView.scss';\n\nvar MovieView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MovieView, _Component);\n\n  function MovieView() {\n    _classCallCheck(this, MovieView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MovieView).apply(this, arguments));\n  }\n\n  _createClass(MovieView, [{\n    key: \"render\",\n    value: function render() {\n      // Check if the object is empty\n      var noMovie = Object.entries(this.props.movie).length === 0 && this.props.movie.constructor === Object;\n\n      if (noMovie) {\n        return React.createElement(Card, {\n          className: \"MovieViewCss\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, \"No Movie yet!\"));\n      } else {\n        // Iterate over the Movie's abilities and generate a label for each.\n        var abilitiesView = this.props.movie.abilities.map(function (ability, idx) {\n          return (// Using `idx` as a key is generally discouraged:\n            // https://reactjs.org/docs/lists-and-keys.html#keys\n            React.createElement(Label, {\n              key: idx,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 25\n              },\n              __self: this\n            }, ability.ability.name)\n          );\n        }); // Display some data about the Movie, and its abilities.\n\n        return React.createElement(Card, {\n          className: \"MovieViewCss\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(Card.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, React.createElement(Card.Header, {\n          className: \"MovieViewHeader\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, this.props.movie.Movie), React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"Abilities\")));\n      }\n    }\n  }]);\n\n  return MovieView;\n}(Component);\n\nMovieView.propTypes = {\n  movie: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    abilities: PropTypes.arrayOf(PropTypes.shape({\n      ability: PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string\n      })\n    })),\n    sprites: PropTypes.object\n  })\n};\nexport default MovieView;","map":{"version":3,"sources":["/home/zecheng3/workspace/cs411/final_project/cs411_project/front-end/src/components/Movie/MovieView/MovieView.jsx"],"names":["React","Component","PropTypes","Card","Label","MovieView","noMovie","Object","entries","props","movie","length","constructor","abilitiesView","abilities","map","ability","idx","name","Movie","propTypes","shape","string","id","number","arrayOf","url","sprites","object"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,mBAA5B;AAEA,OAAO,kBAAP;;IAEMC,S;;;;;;;;;;;;;6BACK;AACP;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAe,KAAKC,KAAL,CAAWC,KAA1B,EAAiCC,MAAjC,KAA4C,CAA5C,IACX,KAAKF,KAAL,CAAWC,KAAX,CAAiBE,WAAjB,KAAiCL,MADtC;;AAGA,UAAID,OAAJ,EAAa;AACX,eACE,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CADF;AAKD,OAND,MAMO;AACL;AACA,YAAMO,aAAa,GAAG,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI,SAAjB,CAA2BC,GAA3B,CAA+B,UAACC,OAAD,EAAUC,GAAV,EAAkB;AACrE,iBACE;AACA;AACA,gCAAC,KAAD;AAAO,cAAA,GAAG,EAAEA,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACGD,OAAO,CAACA,OAAR,CAAgBE,IADnB;AAHF;AAOD,SARqB,CAAtB,CAFK,CAYL;;AACA,eACE,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD,CAAM,MAAN;AAAa,UAAA,SAAS,EAAC,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKT,KAAL,CAAWC,KAAX,CAAiBS,KADpB,CADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAXF,CADF,CADF;AAkBD;AACF;;;;EA5CqBlB,S;;AA+CxBI,SAAS,CAACe,SAAV,GAAsB;AACpBV,EAAAA,KAAK,EAAER,SAAS,CAACmB,KAAV,CAAgB;AACrBH,IAAAA,IAAI,EAAEhB,SAAS,CAACoB,MADK;AAErBC,IAAAA,EAAE,EAAErB,SAAS,CAACsB,MAFO;AAGrBV,IAAAA,SAAS,EAAEZ,SAAS,CAACuB,OAAV,CAAkBvB,SAAS,CAACmB,KAAV,CAAgB;AAC3CL,MAAAA,OAAO,EAAEd,SAAS,CAACmB,KAAV,CAAgB;AACvBH,QAAAA,IAAI,EAAEhB,SAAS,CAACoB,MADO;AAEvBI,QAAAA,GAAG,EAAExB,SAAS,CAACoB;AAFQ,OAAhB;AADkC,KAAhB,CAAlB,CAHU;AASrBK,IAAAA,OAAO,EAAEzB,SAAS,CAAC0B;AATE,GAAhB;AADa,CAAtB;AAcA,eAAevB,SAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Card, Label } from 'semantic-ui-react'\n\nimport './MovieView.scss'\n\nclass MovieView extends Component {\n  render() {\n    // Check if the object is empty\n    const noMovie = Object.entries(this.props.movie).length === 0\n      && this.props.movie.constructor === Object;\n\n    if (noMovie) {\n      return (\n        <Card className=\"MovieViewCss\">\n          <h3>No Movie yet!</h3>\n        </Card>\n      )\n    } else {\n      // Iterate over the Movie's abilities and generate a label for each.\n      const abilitiesView = this.props.movie.abilities.map((ability, idx) => {\n        return (\n          // Using `idx` as a key is generally discouraged:\n          // https://reactjs.org/docs/lists-and-keys.html#keys\n          <Label key={idx}>\n            {ability.ability.name}\n          </Label>\n        )\n      });\n\n      // Display some data about the Movie, and its abilities.\n      return (\n        <Card className=\"MovieViewCss\">\n          <Card.Content>\n            <Card.Header className=\"MovieViewHeader\">\n              {this.props.movie.Movie}\n            </Card.Header>\n           {/* <Card.Meta>\n              Pokedex #{this.props.movie.id}\n            </Card.Meta>\n            <img\n              src={this.props.movie.sprites.front_default}\n              alt={`Sprite of ${this.props.movie.name}`}\n            />*/}\n            <h4>Abilities</h4>\n            {/*{abilitiesView}*/}\n          </Card.Content>\n        </Card>\n      )\n    }\n  }\n}\n\nMovieView.propTypes = {\n  movie: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    abilities: PropTypes.arrayOf(PropTypes.shape({\n      ability: PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      })\n    })),\n    sprites: PropTypes.object,\n  }),\n}\n\nexport default MovieView\n"]},"metadata":{},"sourceType":"module"}